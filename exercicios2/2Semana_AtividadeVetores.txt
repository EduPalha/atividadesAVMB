
9.	Escreva um algoritmo que leia os valores para um vetor de 10 elementos, e em seguida 
ordene em ordem crescente os valores desse vetor, utilizando um vetor auxiliar.

10.	Escreva um algoritmo que leia um vetor inteiro de 20 posições. Crie um segundo vetor, 
substituindo os valores nulos por 2. Mostre os vetores lidos e o vetor resultado.

11.	Escreva um programa que leia valores em um vetor de 5 posições. Escrever os elementos 
do vetor e após escrever os elementos na ordem inversa.


12.	Faça um algoritmo que leia um vetor V de 10 posições e, após, verifica se um número N, 
fornecido pelo usuário, existe no vetor. Se existir, indicar a(s) posição(ões), senão escrever 
a mensagem "O número fornecido não existe no vetor!".


13.	Escreva um algoritmo para ler um vetor de inteiros e positivos e imprimir quantas vezes 
aparecem os números 2, 4 e 8. O vetor terá no máximo 100 posições. Sair do programa quando for 
digitado -1 ou quando atingir o máximo de posições do vetor.

14.	Escreva um algoritmo que leia um código numérico inteiro e um vetor de 50 posições de 
números. Se o código for zero, termine o algoritmo. Se o código for 1, mostre o vetor na ordem 
em que foi lido. Se o código for 2, mostre o vetor na ordem inversa, do último elemento até o 
primeiro.

15.	Faça um programa em C que declare um vetor de 20 elementos inteiros, leia os conteúdos 
do vetor, e copie estes conteúdos para outro vetor, invertendo sua ordem. Assim, o valor do 
primeiro elemento do primeiro vetor deve ser o valor do último elemento do segundo vetor, por 
exemplo. Mostrar os conteúdos do primeiro vetor em uma linha e os do segundo uma linha abaixo.

16.	Escreva um algoritmo que leia 2 vetores X[10] e Y[10] e os escreva. Crie, a seguir, um 
vetor para cada uma das operações:
•	A união de X com Y
•	A diferença entre X e Y
•	A interseção entre X e Y
Escreva o vetor resultado de cada uma das operações.
